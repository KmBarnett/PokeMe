{"version":3,"sources":["Components/PokeDex/PokeDex.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["PokeDex","useState","imgExists","takeImg","isScanning","setScan","allPokemon","setPokedex","pokemon","setPokemon","videoPlayer","useRef","canvas","typesColor","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","getSpecies","a","fetch","species","url","res","json","data","id","getPokemon","pokedex","results","forEach","types","map","item","type","name","setDevice","device","deviceId","navigator","mediaDevices","getUserMedia","audio","video","then","stream","current","srcObject","catch","err","console","log","undefined","playPromise","play","_","setTimeout","takePhoto","error","Math","floor","random","length","getContext","drawImage","width","height","getVideoTracks","track","stop","scan","enumerateDevices","cameras","useEffect","className","style","display","ref","onClick","disabled","key","background","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7c005dc1.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport \"./PokeDex.css\";\n\nfunction PokeDex() {\n  const [imgExists, takeImg] = useState(false);\n  const [isScanning, setScan] = useState(false);\n  const [allPokemon, setPokedex] = useState([]);\n  const [pokemon, setPokemon] = useState(null);\n  const videoPlayer = useRef(null);\n  const canvas = useRef(null);\n\n  const typesColor = {\n    normal: \"#A8A77A\",\n    fire: \"#EE8130\",\n    water: \"#6390F0\",\n    electric: \"#F7D02C\",\n    grass: \"#7AC74C\",\n    ice: \"#96D9D6\",\n    fighting: \"#C22E28\",\n    poison: \"#A33EA1\",\n    ground: \"#E2BF65\",\n    flying: \"#A98FF3\",\n    psychic: \"#F95587\",\n    bug: \"#A6B91A\",\n    rock: \"#B6A136\",\n    ghost: \"#735797\",\n    dragon: \"#6F35FC\",\n    dark: \"#705746\",\n    steel: \"#B7B7CE\",\n    fairy: \"#D685AD\",\n  };\n\n  const getSpecies = async (pokemon) => {\n    const res = await fetch(pokemon.species.url);\n    const data = await res.json();\n    return data.id;\n  };\n\n  const getPokemon = async () => {\n    const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=964\");\n    const data = await res.json();\n    const pokedex = data.results;\n    pokedex.forEach(async (pokemon) => {\n      let res = await fetch(pokemon.url);\n      let data = await res.json();\n      pokemon.data = {\n        type: data.types.map((item) => item.type.name),\n        id: await getSpecies(data),\n      };\n    });\n    setPokedex(pokedex);\n  };\n\n  const randomPokemon = () => {\n    return Math.floor(Math.random() * allPokemon.length);\n  };\n\n  const processDevices = (devices) => {\n    devices.forEach((device) => {\n      setDevice(device);\n    });\n  };\n\n  const setDevice = async (device) => {\n    const { deviceId } = device;\n    await navigator.mediaDevices\n      .getUserMedia({ audio: false, video: { deviceId } })\n      .then((stream) => (videoPlayer.current.srcObject = stream))\n      .catch((err) => console.log(err));\n    let playPromise = videoPlayer.current.play();\n    if (playPromise !== undefined) {\n      playPromise\n        .then((_) => {\n          // Automatic playback started!\n          // Show playing UI.  \n          setScan(true);\n          setTimeout(takePhoto, 3000);\n        })\n        .catch((error) => {\n          // Auto-play was prevented\n          // Show paused UI.\n          console.log(\"playback prevented\");\n        });\n    }\n  };\n\n  const turnCameraOff = () => {\n    console.log(\"ran\", videoPlayer.current.srcObject.getVideoTracks());\n    videoPlayer.current.srcObject\n      .getVideoTracks()\n      .forEach((track) => {\n          track.stop();\n      });\n  };\n\n  const takePhoto = () => {\n    setPokemon(randomPokemon());\n    setScan(false);\n    const context = canvas.current.getContext(\"2d\");\n    context.drawImage(\n      videoPlayer.current,\n      0,\n      0,\n      canvas.current.width,\n      canvas.current.height\n    );\n    turnCameraOff()\n    takeImg(true);\n  };\n\n  const scan = async () => {\n    takeImg(false);\n    setPokemon(null);\n    const cameras = await navigator.mediaDevices.enumerateDevices();\n    processDevices(cameras);\n  };\n\n  useEffect(() => {\n    getPokemon();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"pokeindex\">\n      <div className=\"pokeindex-left\">\n        <div className=\"pokeindex-left__top\">\n          <div className=\"circle-big\"></div>\n          <div className=\"circle-small\"></div>\n        </div>\n        <div className=\"pokeindex-left__screen\">\n          <div className=\"dots\">\n            <span></span>\n            <span></span>\n          </div>\n          <div className=\"screen\">\n            <video\n              style={{ display: !imgExists ? \"initial\" : \"none\" }}\n              ref={videoPlayer}\n            />\n            <canvas\n              className=\"canvas screen\"\n              style={{ display: imgExists ? \"initial\" : \"none\" }}\n              ref={canvas}\n            />\n            {isScanning && (\n              <div className=\"diode\">\n                <div className=\"laser\"></div>\n              </div>\n            )}\n          </div>\n          <div className=\"status\">\n            <div className=\"status-light\"></div>\n            <div className=\"status-sound\">\n              <span></span>\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n        <div className=\"pokeindex-left__buttons\">\n          <div className=\"buttons\">\n            <div className=\"buttons-circle\"></div>\n            <div className=\"buttons-quad\">\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n          <div className=\"controller\">\n            {allPokemon.length > 0 ? (\n              <button onClick={scan} className=\"controller-touch\">\n                Scan\n              </button>\n            ) : (\n              <button disabled className=\"controller-touch\">\n                Loading...\n              </button>\n            )}\n            <div className=\"controller-joystick\"></div>\n          </div>\n        </div>\n      </div>\n      <div className=\"pokeindex-middle\"></div>\n      <div className=\"pokeindex-right\">\n        {pokemon !== null ? (\n          <div className=\"pokeindex-right__screen\">\n            <h2>{allPokemon[pokemon].name}</h2>\n            <div className=\"poke-info\">\n              <h3>#{allPokemon[pokemon].data.id}</h3>\n              <div className=\"types\">\n                {allPokemon[pokemon].data.type.map((type) => (\n                  <h3 key={type} style={{ background: typesColor[type] }}>\n                    {type}\n                  </h3>\n                ))}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"pokeindex-right__screen\"></div>\n        )}\n        <div className=\"pokeindex-right__buttons\">\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n        <div className=\"pokeindex-right__buttons-quadruple\">\n          <div className=\"dot\">\n            <span></span>\n            <span></span>\n          </div>\n          <div className=\"button\">\n            <span></span>\n            <span></span>\n          </div>\n        </div>\n        <div className=\"pokeindex-right__buttons-triple\">\n          <div className=\"button\">\n            <span></span>\n            <span></span>\n          </div>\n          <div className=\"light\"></div>\n        </div>\n        <div className=\"pokeindex-right__buttons-double\">\n          <span></span>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PokeDex;\n","import React from \"react\";\nimport \"./App.css\";\nimport PokeDex from \"../PokeDex/PokeDex\";\n\nfunction App() {\n  \n\n  return (\n    <main className=\"App\">\n      <h1 className=\"title\">PokéMe</h1>\n      <PokeDex />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}